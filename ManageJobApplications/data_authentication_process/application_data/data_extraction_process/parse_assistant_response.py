import ast
import re

from ManageJobApplications.data_authentication_process.application_data.auth_application_data.testing_dataset.example_data_for_parse_assistant_response import \
    example_data_for_parse_assistant_response


def parse_assistant_response(assistant_response):
    """
    Parse the response from the OpenAI assistant to extract application details.

    Parameters:
    - assistant_response (str): The response generated by the OpenAI assistant.

    Returns:
    - application_data (list of tuples): List of tuples representing the extracted application details.
    """
    try:
        print(f'Assistant Response before parsing:\n{assistant_response}\n')

        # Find the start and end indexes of the characters within the square brackets
        start_index = assistant_response.find("[")
        end_index = assistant_response.rfind("]")

        if start_index == -1 or end_index == -1:
            raise ValueError("Square brackets not found in the response")

        # Extract the characters within the square brackets
        application_data_str = assistant_response[start_index:end_index + 1]

        # Replace newlines and extra spaces to avoid parsing issues
        application_data_str = application_data_str.replace('\n', ' ').replace('\r', '')

        try:
            # Attempt to parse using ast.literal_eval
            application_data_tuples = ast.literal_eval(application_data_str)
            return application_data_tuples
        except (ValueError, SyntaxError):
            # Adjust regex to properly handle multiline entries and escaped quotes
            key_value_pairs = re.findall(r"\('([^']+)',\s*'((?:[^'\\]|\\.)*?)'\)", application_data_str)
            # Handle escape sequences properly in the captured values
            key_value_pairs = [(key, value.replace("\\n", "\n").replace("\\'", "'").replace("\\\\", "\\")) for
                               key, value in key_value_pairs]

            return key_value_pairs

    except (ValueError, SyntaxError) as e:
        print(f"Error parsing assistant response: {e}")
        return None

# Example usage
# if __name__ == "__main__":
#     data = example_data_for_parse_assistant_response()
#     parsed_data = parse_assistant_response(data)
#     print(type(parsed_data))
#     print(parsed_data)
